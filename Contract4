<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Contract List</title>
    <style>
        table.contract-table {
            width: 100%;
            border-collapse: collapse;
        }
        table.contract-table, th, td {
            border: 1px solid black;
        }
        th, td {
            padding: 8px;
            text-align: left;
        }
        .buttons {
            margin-top: 10px;
            display: flex;
            justify-content: flex-end;
        }
        #xmlOutput {
            margin-top: 20px;
            white-space: pre-wrap;
            border: 1px solid black;
            padding: 10px;
        }
    </style>
    <script>
        function parseXML(xmlString) {
            const parser = new DOMParser();
            return parser.parseFromString(xmlString, 'text/xml');
        }

        function fetchData(contractId) {
            // Placeholder function to fetch data
            return `Data for contract ID: ${contractId}`;
        }

        function saveAllData() {
            let xmlString = '<contracts>';

            const contractRows = document.getElementsByClassName('contract-row');
            for (let row of contractRows) {
                const contractId = row.getElementsByClassName('contract-id')[0].textContent;
                const fetchedData = row.getElementsByClassName('fetched-data')[0].textContent;
                const inputValue = row.getElementsByTagName('input')[0].value;

                xmlString += generateXML(contractId, fetchedData, inputValue);
            }

            xmlString += '</contracts>';
            displayXML(xmlString);
        }

        function cancelAllData() {
            const contractRows = document.getElementsByClassName('contract-row');
            for (let row of contractRows) {
                row.getElementsByTagName('input')[0].value = '';
            }
        }

        function generateXML(contractId, fetchedData, inputValue) {
            return `
                <contract>
                    <contractId>${contractId}</contractId>
                    <derivedValue>${fetchedData}</derivedValue>
                    <inputValue>${inputValue}</inputValue>
                </contract>`;
        }

        function displayXML(xmlString) {
            const xmlOutput = document.getElementById('xmlOutput');
            xmlOutput.textContent = xmlString;
        }

        function createTable(xml) {
            const contractList = xml.getElementsByTagName('contractListXML');
            const tableBody = document.getElementById('contractTableBody');

            let rowsHTML = '';

            for (let i = 0; i < contractList.length; i++) {
                const contractId = contractList[i].getElementsByTagName('contractId')[0].textContent;
                const fetchedData = fetchData(contractId);

                rowsHTML += `
                    <tr class="contract-row">
                        <td class="contract-id">${contractId}</td>
                        <td class="fetched-data">${fetchedData}</td>
                        <td><input type="text" id="input_${contractId}"></td>
                    </tr>
                `;
            }

            tableBody.innerHTML = rowsHTML;
        }

        window.onload = function() {
            const xmlString = `
                <contracts>
                    <contractListXML>
                        <contractId>123456</contractId>
                    </contractListXML>
                    <contractListXML>
                        <contractId>123457</contractId>
                    </contractListXML>
                    <contractListXML>
                        <contractId>123458</contractId>
                    </contractListXML>
                </contracts>
            `;

            const xml = parseXML(xmlString);
            createTable(xml);
        }
    </script>
</head>
<body>
    <h1>Contract List</h1>
    <table class="contract-table">
        <thead>
            <tr>
                <th>Contract ID</th>
                <th>Fetched Data</th>
                <th>Input</th>
            </tr>
        </thead>
        <tbody id="contractTableBody">
        </tbody>
    </table>
    <div class="buttons">
        <button onclick="saveAllData()">Save All</button>
        <button onclick="cancelAllData()">Cancel All</button>
    </div>
    <div id="xmlOutput"></div>
</body>
</html>


<div class="input-table" align="center">
            <table class="contract-table" cellspacing="2" oraList="cmRecordIdGroup/mappedDataArea/contracts" onResize="if (this.clientWidth > this.parentNode.clientWidth) { this.parentNode.className += ' oraGridDivScroll';};">
              <thead>
                  <tr align="center">
                      <th nowrap oraLabel="contractId" class="oraGridColumnHeader"></td>
                      <th nowrap oraLabel="saId" style="text-align: center;" class="oraGridColumnHeader"></td>
                      <th nowrap oraLabel="assignedCertificates" class="oraGridColumnHeader"></td>
                      </tr>
                  </thead>
                  <tbody>
                      <tr>
                          <td oraField="contractId" class="oraNormal oraDisplayCell" id="contractIdData"></td>
                          <td oraField="saId" class="oraNormal oraDisplayCell" id="saIdData"><span oraField="saId" oraType="fkRef:true; info:true; context:true; navigation:true;"></span></td>
                          <td class="oraNormal oraDisplayCell" id="inputData"><input class="oraInput" oraField="assignedCertificates" style="width: 150px;"></td>
                      </tr>
                </tbody>
                
            </table>              
        </div>
        <div class="buttons" align="center">
            <tr>
                <td>
                    <input onClick="saveAllData();" oraMdLabel="SAVE_BTN_LBL" class="oraButton" type="button">
                    <input onClick="oraSubmitMap('CANCEL',false);" oraMdLabel="CANCEL_LBL" class="oraButton" type="button">
                </td>
            </tr>
        </div>
